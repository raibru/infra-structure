---
# tasks file for docker.registry

#- name: check if docker is installed
#  command:
#    cmd: "which docker"
#  become: false
#  run_once: true  
#  failed_when: false
#  changed_when: false
#  register: docker_installed

- name: check if docker-registry container already runs
  shell: "docker ps -a |grep {{ registry_name }}"
  run_once: true  
  failed_when: false
  changed_when: false
  register: registry_container_runs

- name: check if docker-registry cert already exists
  stat:
    path: "{{ root_dir }}/build/certs/develop.crt"
  connection: local
  become: false
  run_once: true
  register: cert_docker_registry_stat

- name: execute setup-cert task if no certs exists
  include_tasks: setup-cert.yml
  when: not cert_docker_registry_stat.stat.exists

- name: execute stop-docker-registry task if running and cert changed
  include_tasks: stop-docker-registry.yml
  when: registry_container_runs.stdout != "" and not cert_docker_registry_stat.stat.exists

- name: execute start-docker-registry task if not runs or cert changed
  include_tasks: start-docker-registry.yml
  when: registry_container_runs.stdout == "" or not cert_docker_registry_stat.stat.exists

- name: list registry content
  command:
    cmd: "curl -k -s -X GET https://{{ registry_ip }}:5000/v2/_catalog"
  failed_when: false
  changed_when: false
  register: registry_catalog

- debug:
    var: registry_catalog.stdout

#- block:
#
#  - name: ensure openssl has subjectAltName IP entry for registry service
#    lineinfile:
#      dest: /etc/ssl/openssl.cnf
#      insertafter: '^\[ v3_ca \]$'
#      line: "subjectAltName=IP:{{ registry_ip }},IP:127.0.0.1"
#      firstmatch: yes
#      state: present
#    become: true
#
#  - name: copy template docker registry cert config file
#    template:
#      src: docker-registry-cert.conf
#      dest: "{{ root_dir }}/build/certs/develop-registry-cert.conf"
#    connection: local
#    become: false
#    run_once: true
#    when: not cert_docker_registry_stat.stat.exists
#
#  - name: generate a develop cert and key for docker registry
#    command: >
#      openssl req -x509
#      -out {{ root_dir }}/build/certs/develop.crt
#      -keyout {{ root_dir }}/build/certs/develop.key
#      -days 1825 -newkey rsa:2048 -nodes -sha256
#      -subj '/C=DE/ST=HB/L=HB/O=DEV/OU=DEV/CN={{ registry_ip }}'
#      -extensions EXT
#      -config {{ root_dir }}/build/certs/develop-registry-cert.conf
#    connection: local
#    become: false
#    run_once: true
#    when: not cert_docker_registry_stat.stat.exists
#
#  - name: make a certifactes directory in docker registry
#    file:
#      path: /certificates
#      state: directory
#      owner: root
#      group: root
#    become: true
#
#  - name: copy docker registry develop cert into remote certs
#    copy:
#      src: "{{ root_dir }}/build/certs/develop.crt"
#      dest: "/certificates/develop.crt"
#      owner: root
#      group: root
#    become: true
#
#  - name: copy docker registry develop key into remote certs
#    copy:
#      src: "{{ root_dir }}/build/certs/develop.key"
#      dest: "/certificates/develop.key"
#      owner: root
#      group: root
#    become: true
#
#  - name: ensure Docker cert store directory exists
#    file:
#      path: "/etc/docker/certs.d/{{ registry_ip }}:5000/"
#      state: directory
#      recurse: true
#      owner: root
#      group: root
#    become: true
#
#  - name: copy docker registry developer cert into docker cert store.
#    copy:
#      src: "{{ root_dir }}/build/certs/develop.crt"
#      dest: "/etc/docker/certs.d/{{ registry_ip }}:5000/ca.crt"
#      owner: root
#      group: root
#    become: true
#
#  - name: restart docker service
#    become: true
#    service:
#      name: docker.service
#      state: restarted
#
#  - name: "pull image {{ registry_docker_hub }} from docker hub"
#    command:
#      cmd: "docker pull {{ registry_docker_hub }}"
#
#  - name: "tag pulled image with {{ registry_tag_latest }}"
#    command:
#      cmd: "docker tag {{ registry_docker_hub }} {{ registry_tag_latest}}"
#
#  - name: "tag pulled image with {{ registry_tag_run }}"
#    command:
#      cmd: "docker tag {{ registry_docker_hub }} {{ registry_tag_run}}"
#
#  - name: "run in docker {{ registry_tag_run }}"
#    command: >
#      docker run -d --restart always
#      -p 5000:5000
#      -v /certificates:/certificates
#      -v /var/registry:/var/lib/registry
#      -e REGISTRY_HTTP_TLS_CERTIFICATE=/certificates/develop.crt
#      -e REGISTRY_HTTP_TLS_KEY=/certificates/develop.key
#      --name registry
#      {{ registry_tag_run }}
#
#  - name: wait a second until registry container is successful started
#    command:
#      cmd: sleep 1
#
#  - name: list registry content
#    command:
#      cmd: "curl -k -s -X GET https://{{ registry_ip }}:5000/v2/_catalog"
#    register: registry_catalog
#
#  - debug:
#      var: registry_catalog.stdout
#
#  # block
#  when: docker_installed.stdout != "" and registry_container_notruns.stdout == ""
#  become: false
